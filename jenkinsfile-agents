pipeline {
    agent none

    environment {
        GIT_REPO = 'https://github.com/fdelgadodyvenia/todo-list-aws.git'
        BRANCH = 'main'
        AWS_REGION = 'us-east-1'
        STACK_NAME = 'todo-stack-prod'
        S3_BUCKET = 'aws-sam-cli-managed-default-samclisourcebucket-hgwhprjqmlgt'
    }

    stages {
        stage('üì• Get Code') {
            agent { label 'master' }
            steps {
                withCredentials([usernamePassword(credentialsId: 'd579908c-4755-490c-af17-6888c97748fd', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                    sh """
                        echo "üîΩ Cloning repository from main branch"
                        git clone --branch \$BRANCH https://\$GIT_USER:\$GIT_PASS@github.com/fdelgadodyvenia/todo-list-aws.git
                    """
                }
                stash name: 'source-code', includes: 'todo-list-aws/**'
            }
        }

        stage('üöÄ SAM Deploy') {
            agent { label 'master' }
            steps {
                unstash 'source-code'
                dir('todo-list-aws') {
                    sh """
                        echo "üîß Building SAM Application"
                        sam build

                        echo "üöÄ Deploying to Production"
                        curl -L -o samconfig.toml https://raw.githubusercontent.com/fdelgadodyvenia/todo-list-aws-config/prod/samconfig.toml
                        
                        echo "üìÇ samconfig.toml content:"
                        cat samconfig.toml

                        sam deploy --config-file samconfig.toml --config-env production
                    """
                    script {
                        echo "üîç Fetching BASE_URL from CloudFormation Outputs"
                        BASE_URL = sh(
                            script: """
                                aws cloudformation describe-stacks \
                                  --stack-name $STACK_NAME \
                                  --query "Stacks[0].Outputs[?OutputKey=='BaseUrlApi'].OutputValue" \
                                  --output text --region $AWS_REGION
                            """,
                            returnStdout: true
                        ).trim()
                        echo "üåê BASE_URL = ${BASE_URL}"
                    }
                }
            }
            post {
                always {
                    echo "üßπ Cleaning workspace (master)"
                    cleanWs()
                }
            }
        }

        stage('üß™ Rest Test (Read-Only)') {
            agent { label 'rest-test' }
            steps {
                unstash 'source-code'
                dir('todo-list-aws') {
                    withEnv(["BASE_URL=${BASE_URL}"]) {
                        sh """
                            echo "üêç Setting up virtual environment for integration tests"
                            python3 -m venv venv
                            . venv/bin/activate
                            pip install --upgrade pip
                            pip install -r requirements.txt || pip install pytest requests

                            echo "‚úÖ Running pytest for integration tests"
                            pytest test/integration/test_readonly.py --disable-warnings
                        """
                    }
                }
            }
            post {
                always {
                    echo "üßπ Cleaning workspace (rest-test)"
                    cleanWs()
                }
            }
        }
    }
}
